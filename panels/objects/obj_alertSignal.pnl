V 14
1
LANG:10001 0 
PANEL,-1 -1 170 24 N "_3DFace" 2
"$DP"
"$node"
"main()
{
  init();
}" 0
 E E E E 1 -1 -1 0  39 79
""0  1
E "#uses \"miscs/misc\"

string dpe;
string picturepath = PROJ_PATH + \"pictures/icons/svg/\";

void init()
{
  //check the DP and DPE
  dpe = $DP +$node;
  bool validEqp = dpExists(dpe);
  if(!validEqp)
  {
    alertText.foreCol(\"STD_device_not_existing\");
    DebugFN(\"objectFlag\",\"There is no DP or DPE:\",$DP,\"dpe:\",dpe,\"moduleName:\",myModuleName(), \"panelName:\",myPanelName());
  }
  else
  {
    dpQueryConnectSingle(\"doIt\",true, \"\", \"SELECT '_alert_hdl.._active','_alert_hdl.._act_state','_alert_hdl.._class','_original.._value' FROM '\" + dpe + \"'\");
  }

}

void doIt(string s, dyn_dyn_anytype alertQueryValues)
{
  dyn_anytype alertValues = alertQueryValues.at(1);

  bool active = alertValues.at(1);
  int state = alertValues.at(2);
  string alertClass = alertValues.at(3);
  bool value = alertValues.at(4);

  if(!active)
  {
    alertText.foreCol(\"STD_undefined\");
    alertText.text(\"Alert Active Degil\");
    DebugFN(\"objectFlag\",\"Alert is Deactive:\",dpe);
  }
  else
  {
    if(state == 0)
      alertRec.backCol(\"SiemensStone\");
    else
      alertRec.backCol(get_color(alertClass,state));
  }


  //Set Text of Alert
  alertText.text(get_description(dpe,value));

  //Ack Icon
  string icon;

  int ackType = get_ackType(alertClass);
  if(ackType == 1)
  {
    ackRec.fill(\"[outline]\");
  }
  else
  {
    ackRec.visible(true);
    if(state == 1 || state == 3)
     icon =  \"single_nack.svg\";
    else
      icon =  \"single_ack.svg\";

    setValue(\"ackRec\", \"fill\", \"[pattern,[fit,any,\"+ picturepath+icon +\"]]\");
  }
}
" 0
 4
"CBRef" "1"
"EClose" E
"dpi" "96"
"pdpi" "94.1104"
2 1 0 0 0 0 1 0
""
DISPLAY_LAYER, 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0
LAYER, 0 
1
LANG:10001 0 
6 0
"alertRec"
""
1 39 79 E E E 1 E 1 E N {0,0,0} E N "SiemensStone" E E
 E E
0 0 0 0 0 0
E E E
0
1
LANG:10001 0 

6
"minimumSize" "24 24"
"maximumSize" "24 24"
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E E 0 1 3 2 1 E 1 0 1 34 -16 1 E 39 79 62 102
2 1
"alertText"
""
1 105 67 E E E 1 E 1 E N "_WindowText" E N "_Window" E E
 E E
1 0 0 0 0 0
E E E
0
1
LANG:10001 0 

7
"minimumSize" "-1 24"
"maximumSize" "-1 24"
"sizePolicy" "Expanding Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
"transformable" "0"
E E 0 1 3 2 1 E U  0 E 105 67 206 82
0 2 2 "0s" 0 0 0 192 0 0  105 67 1
1
LANG:10001 41 Siemens DEDS,-1,16,5,50,0,0,0,0,0,Regular
0 1
LANG:10001 14 AlertDefiniton
6 2
"ackRec"
""
1 65 130 E E E 1 E 1 E N "_Transparent" E N {255,255,255} E E
 E E
2 0 0 0 0 0
E E E
0
1
LANG:10001 0 

4
"sizePolicy" "Fixed Fixed"
"layoutAlignment" "AlignNone"
"dashclr"N "_Transparent"
"antiAliased" "0"
E "main(mapping event)
{
  bool result = set_Acknowledge(dpe+\":_alert_hdl.._ack\");

  DebugFN(\"objectFlag\",\"There is an Error during Acknowledgement\", result);
}" 0
 0 1 3 2 1 E 1.210526315789473 0 1.15 -29.68421052631578 -86.50000000000003 2  1 0  "pictures/icons/svg/single_nack.svg" 4294967295 E 65 130 84 150
0
LAYER, 1 
1
LANG:10001 0 
0
LAYER, 2 
1
LANG:10001 0 
0
LAYER, 3 
1
LANG:10001 0 
0
LAYER, 4 
1
LANG:10001 0 
0
LAYER, 5 
1
LANG:10001 0 
0
LAYER, 6 
1
LANG:10001 0 
0
LAYER, 7 
1
LANG:10001 0 
0
4 0 "LAYOUT_GROUP9" -1
3 0 
1 0 2 

"S 1" "2 0 1 1"
"S 0" "1 0 1 1"
"S 2" "0 0 1 1"
"" ""
0 1 0 0
0
